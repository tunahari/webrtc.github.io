const socket = io("http://localhost:3000"); // comment khi deploy local
// const socket = io("https://3000-tunahari-webrtcgithubio-5y4u2ynx3zf.ws-us118.gitpod.io/"); // comment khi deploy

let currentRoomId = ""; // Bi·∫øn ƒë·ªÉ l∆∞u RoomID hi·ªán t·∫°i
let userRoomsClient = {};
let peer;
let localStream;
const peers = {}; // { peerId: RTCPeerConnection, ... }
const statusElement = document.querySelector(".status");

async function getIceServers() {
  try {
    const response = await fetch("http://localhost:3000/getIceServers"); // comment khi deploy
    // const response = await fetch("https://3000-tunahari-webrtcgithubio-5y4u2ynx3zf.ws-us118.gitpod.io/getIceServers"); // comment khi ch·∫°y local
    const data = await response.json();
    return data.v.iceServers;
  } catch (error) {
    console.error("L·ªói l·∫•y ICE servers:", error);
    return [{ urls: "stun:stun.l.google.com:19302" }]; // H·ªá th·ªëng STUN D·ª± ph√≤ng
  }
}

getIceServers().then((iceServers) => {
  peer = new Peer(undefined, { config: { iceServers } });
  setupPeerEvents();
});

function setupPeerEvents() {
  peer.on("open", (id) => {
    $("#my-peer").append(id);
    $("#my-peer-id").append(id);

    // Move the JOIN_ROOM event listener inside peer.on("open")
    $("#btnJoinRoom").click(() => {
      const username = $("#txtUsername").val();
      const roomId = $("#txtRoomId").val();
      if (!username || !roomId) {
        return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      }
      //ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
      if (username.trim().length == 0 || roomId.trim().length == 0) {
        return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      }

      socket.emit("JOIN_ROOM", { username, peerID: id, roomId });
    });
  });

  peer.on("call", (call) => {
    if (peers[call.peer]) {
      console.log("call exist");
      call.close();
      return;
    }
    openStream().then((stream) => {
      call.answer(stream);
      playStream("localStream", stream);
      call.on("stream", (remoteStream) => {
        playStream(`remoteStream-${call.peer}`, remoteStream);
        //T·∫°o 1 video element cho stream m·ªõi
        createRemoteVideo(call.peer);
      });
      call.on("close", () => {
        removeRemoteVideo(call.peer);
        delete peers[call.peer];
      });
    });
  });
}

$("#div-chat").hide(); // ·∫®n div-chat ·ªü ƒë·∫ßu

// Handle successful room join
socket.on("ROOM_USER_LIST", (data) => {
  const { users, currentPeerID } = data;
  const username = $("#txtUsername").val(); // L·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ input
  const roomId = $("#txtRoomId").val(); //l·∫•y room id

  currentRoomId = roomId; // L∆∞u RoomID hi·ªán t·∫°i
  userRoomsClient[roomId] = users;

  $("#div-chat").show();
  $("#div-signup").hide();

  // Hi·ªÉn th·ªã th√¥ng tin ph√≤ng v√† ng∆∞·ªùi d√πng
  $("#room-info").text(`ƒê√¢y l√† ph√≤ng c√≥ id l√†: ${roomId}`);
  $("#user-info").text(`Ch√†o b·∫°n: ${username}`);

  $("#ulUser").empty();
  users.forEach((user) => {
    if (user.peerID != currentPeerID) {
      addNewUser(user);
    }
  });
});

socket.on("NEW_USER_JOINED", (user) => {
  if (currentRoomId) {
    //N·∫øu c√≥ room hi·ªán t·∫°i th√¨ th√™m user v√†o
    if (!userRoomsClient[currentRoomId]) {
      userRoomsClient[currentRoomId] = [];
    }
    userRoomsClient[currentRoomId].push(user);
    addNewUser(user);
  }
  // addNewUser(user);
});

socket.on("USER_LEFT_ROOM", (peerId) => {
  console.log(`User ${peerId} left the room`);
  $(`#${peerId}`).remove();
  removeRemoteVideo(peerId);
  if (peers[peerId]) {
    peers[peerId].close();
    delete peers[peerId];
  }
  //delete user in userRoomsClient
  for (let roomId in userRoomsClient) {
    let index = -1;
    for (let user of userRoomsClient[roomId]) {
      index++;
      if (user.peerID == peerId) {
        userRoomsClient[roomId].splice(index, 1);
      }
    }
  }
});

socket.on("JOIN_ROOM_FAILED", (reason) => {
  alert(reason);
});

/********************************************* X·ª≠ l√Ω ph√≠m b·∫•m media ***************************************/
async function openStream() {
  const config = { audio: true, video: true };
  try {
    localStream = await navigator.mediaDevices.getUserMedia(config);
    playStream("localStream", localStream);
    return localStream;
  } catch (error) {
    console.error("L·ªói khi truy c·∫≠p media:", error);
  }
}

async function playStream(idVideoTag, stream) {
  const video = document.getElementById(idVideoTag);
  if (video.srcObject !== stream) {
    video.srcObject = stream;
  }
  video.onloadedmetadata = async () => {
    try {
      await video.play();
    } catch (error) {
      console.error("L·ªói ph√°t video:", error);
    }
  };
}

// X·ª≠ l√Ω s·ª± ki·ªán click cho #btnCall
// X·ª≠ l√Ω s·ª± ki·ªán click cho #btnCall
$("#btnCall").click(function () {
  const remotePeerId = $("#remoteID").val();
  $("#remoteID").val(""); //clear input

  if (!remotePeerId || remotePeerId.trim() === "") {
    return alert("Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën g·ªçi!");
  }
  // Ki·ªÉm tra xem c√≥ g·ªçi cho ch√≠nh m√¨nh kh√¥ng
  if (remotePeerId == peer.id) {
    return alert("Kh√¥ng th·ª±c hi·ªán ƒë∆∞·ª£c cu·ªôc g·ªçi ƒë·∫øn ch√≠nh m√¨nh!");
  }

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong ph√≤ng hay kh√¥ng.
  let isInRoom = false;
  let isExistUser = false; // Bi·∫øn ki·ªÉm tra xem ID c√≥ t·ªìn t·∫°i ·ªü b·∫•t k√¨ ph√≤ng n√†o kh√¥ng
  //Duy·ªát qua userRoomClient xem user c√≥ t·ªìn t·∫°i ·ªü room n√†o kh√¥ng
  for (let roomId in userRoomsClient) {
    for (let user of userRoomsClient[roomId]) {
      if (user.peerID == remotePeerId) {
        isExistUser = true;
        //Ki·ªÉm tra c√≥ ·ªü trong c√πng ph√≤ng hi·ªán t·∫°i kh√¥ng
        if (roomId == currentRoomId) {
          isInRoom = true;
        }
        break; //t√¨m th·∫•y r·ªìi th√¨ tho√°t lu√¥n
      }
    }
    //if(isExistUser) break; //t√¨m th·∫•y r·ªìi th√¨ tho√°t lu√¥n //x√≥a d√≤ng n√†y
  }
  //Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng th√¥ng qua server
  socket.emit("CHECK_USER_EXIST", remotePeerId, (check) => {
    // G·ªçi h√†m openStream ƒë·ªÉ m·ªü stream
    openStream().then((stream) => {
      // N·∫øu ng∆∞·ªùi d√πng ·ªü trong ph√≤ng m·ªõi th·ª±c hi·ªán cu·ªôc g·ªçi
      if (isInRoom) {
        callToPeer(remotePeerId, stream);
      } else if (check) {
        // N·∫øu t·ªìn t·∫°i nh∆∞ng kh√¥ng ·ªü c√πng ph√≤ng
        alert("Ng∆∞·ªùi d√πng ƒëang ·ªü RoomID kh√°c. Kh√¥ng th·ªÉ g·ªçi");
      } else {
        alert("Nh·∫≠p sai ID ng∆∞·ªùi d√πng, vui l√≤ng nh·∫≠p l·∫°i");
      }
    });
  });
});

function toggleMic() {
  if (localStream) {
    let audioTracks = localStream.getAudioTracks();
    audioTracks.forEach((track) => (track.enabled = !track.enabled));
    document.getElementById("toggleMic").innerText = audioTracks[0].enabled
      ? "T·∫Øt Mic"
      : "B·∫≠t Mic";
    console.log(
      `Microphone ${
        audioTracks[0].enabled ? "enabled (ƒê√£ B·∫≠t)" : "disabled (ƒê√£ T·∫Øt)"
      }`
    );
  }
}

function toggleCamera() {
  if (localStream) {
    let videoTracks = localStream.getVideoTracks();
    videoTracks.forEach((track) => (track.enabled = !track.enabled));
    document.getElementById("toggleCam").innerText = videoTracks[0].enabled
      ? "T·∫Øt Camera"
      : "B·∫≠t Camera";
    console.log(
      `Camera ${
        videoTracks[0].enabled ? "enabled (ƒê√£ B·∫≠t)" : "disabled (ƒê√£ T·∫Øt)"
      }`
    );
  }
}

function toggleMute() {
  let videoElement = document.getElementById("localStream");
  videoElement.muted = !videoElement.muted;
  document.getElementById("muteButton").innerText = videoElement.muted
    ? "B·∫≠t √Çm Thanh"
    : "T·∫Øt √Çm Thanh";
  console.log(
    `Audio ${videoElement.muted ? "muted (ƒê√£ C√¢m )" : "unmuted (H·∫øt C√¢mÔ∏è)"}`
  );
}

document.getElementById("toggleMic").addEventListener("click", toggleMic);
document.getElementById("toggleCam").addEventListener("click", toggleCamera);
document.getElementById("muteButton").addEventListener("click", toggleMute);

// window.onload = openStream;
//--------------------------------------------------------------------------------------------------------

function addNewUser(user) {
  const { ten, peerID } = user;
  $("#ulUser").append(`<li id="${peerID}">ü§ù ${ten}</li>`);
}
$("#ulUser").on("click", "li", function () {
  const peerId = $(this).attr("id");
  const tenhienthi = document.getElementById(peerId).textContent;
  console.log("id c·ªßa", tenhienthi, "l√†:", peerId);
  //ki·ªÉm tra c√≥ g·ªçi cho ch√≠nh m√¨nh kh√¥ng
  if (peerId == peer.id)
    return alert("Kh√¥ng th·ª±c hi·ªán ƒë∆∞·ª£c cu·ªôc g·ªçi ƒë·∫øn ch√≠nh m√¨nh!");
  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong ph√≤ng hay kh√¥ng.
  let isInRoom = false;
  if (userRoomsClient[currentRoomId]) {
    for (let user of userRoomsClient[currentRoomId]) {
      if (user.peerID == peerId) {
        isInRoom = true;
        break;
      }
    }
  }
  // N·∫øu ng∆∞·ªùi d√πng ·ªü trong ph√≤ng m·ªõi th·ª±c hi·ªán cu·ªôc g·ªçi
  if (isInRoom) {
    openStream().then((stream) => {
      callToPeer(peerId, stream);
    });
  } else {
    alert("Ng∆∞·ªùi d√πng ƒëang ·ªü RoomID kh√°c. Kh√¥ng th·ªÉ g·ªçi");
  }
});

socket.on("connect", () => {
  console.log("ƒê√£ k·∫øt n·ªëi v·ªõi server!");
  statusElement.textContent = "K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß th√†nh c√¥ng!";
  statusElement.style.color = "blue";
});

// H√†m k·∫øt th√∫c cu·ªôc g·ªçi
function endCall(peerId) {
  if (peers[peerId]) {
    peers[peerId].close();
    delete peers[peerId];
  }

  removeRemoteVideo(peerId);
}
// S·ª± ki·ªán click cho n√∫t k·∫øt th√∫c cu·ªôc g·ªçi
$("#btnEndCall").click(() => {
  for (let peerId in peers) {
    endCall(peerId);
  }
});

// H√†m g·ªçi t·ªõi m·ªôt peer c·ª• th·ªÉ
function callToPeer(peerId, stream) {
  if (peers[peerId]) {
    console.log("ƒê√£ t·ªìn t·∫°i peer connection t·ªõi:", peerId);
    return;
  }
  console.log("G·ªçi ƒë·∫øn peer : ", peerId);
  if (!peer || !peer.call) {
    console.error("Peer ho·∫∑c peer.call kh√¥ng t·ªìn t·∫°i.");
    return;
  }
  const call = peer.call(peerId, stream);
  peers[peerId] = call;

  call.on("stream", (remoteStream) => {
    playStream(`remoteStream-${peerId}`, remoteStream);
    createRemoteVideo(peerId);
  });
  //X·ª≠ l√Ω khi cu·ªôc g·ªçi b·ªã ƒë√≥ng
  call.on("close", () => {
    console.log("Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c.");
    endCall(peerId);
  });
  call.on("error", (err) => {
    console.error("L·ªói trong cu·ªôc g·ªçi:", err);
  });
  // Listen for ICE candidates and SDPs
  call.on("icecandidate", (candidate) => {
    console.log("Client g·ª≠i ICE_CANDIDATE ƒë·∫øn Server");
    socket.emit("RELAY_ICE", { peerId, candidate });
  });
}

function createRemoteVideo(peerId) {
  if (document.getElementById(`remoteStream-${peerId}`)) return; // Avoid duplicate video elements

  const videoContainer = document.getElementById("remoteStreams");
  const newVideo = document.createElement("video");
  newVideo.id = `remoteStream-${peerId}`;
  newVideo.autoplay = true;
  newVideo.playsInline = true;
  videoContainer.appendChild(newVideo);
}

function removeRemoteVideo(peerId) {
  const videoElement = document.getElementById(`remoteStream-${peerId}`);
  if (videoElement) {
    videoElement.srcObject = null;
    videoElement.remove();
  }
}
// Listen for ICE candidates and SDPs
socket.on("ICE_CANDIDATE", (candidate) => {
  let peerId = "";
  for (const key in peers) {
    if (peers[key].peerConnection) {
      peerId = key;
    }
  }
  if (peers[peerId] && candidate) {
    peers[peerId].peerConnection.addIceCandidate(candidate).catch((error) => {
      console.error("L·ªói th√™m ICE Candidate:", error);
    });
  }
});

socket.on("SESSION_DESCRIPTION", ({ sdp, peerId }) => {
  if (peers[peerId]) {
    peers[peerId].peerConnection.setRemoteDescription(
      new RTCSessionDescription(sdp)
    );
  }
});

